#第一个
    不使用工厂的话，需要在main函数中直接创建

简单工厂：
    在使用的过程中，使用一个工厂，可以创建自己想要的对象
工厂方法：
    使用的时候不断的扩展类，达到扩展的效果。
抽象工厂：
    创建多个对象




总结：
    简单工厂：虽然某种程度不符合设计原则（比如说开闭原则），但是使用是最多的
    工厂方法：不修改已有类的前提下，通过增加新的工厂类实现扩展
    抽象工厂：不可以增加产品，可以增加产品族




 建造者模式：
    我们要建造一个复杂的产品
 建造者的本质：
    分离对象组件的单独的构造和装配，从而构造复杂的对象，这个模式适用于：某个对象的复杂情况下使用。
    由于实现了构造和装配的解耦，不同的构造器，相同的装配，也可以使用不同的对象